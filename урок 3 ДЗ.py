# -*- coding: utf-8 -*-
"""
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
 Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
"""
def calc(a, b):
 try:
    return a/b
 except ZeroDivisionError:
     print("Деление на 0")
     
     
print(calc(int(input('Первое число: ')), int(input('Второе число: '))))
     

     
"""
2. Выполнить функцию, которая принимает несколько параметров,
 описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
 Функция должна принимать параметры как именованные аргументы.
 Осуществить вывод данных о пользователе одной строкой.
"""

def personal_data( *, name, lastname, year_of_birth, city, email, phone):
    return print(f"Имя: {name} Фамилия: {lastname} Год рождения: {year_of_birth} Город проживания: {city} Email: {email} Телефон: {phone}")


personal_data(name=input('Имя: '),lastname=input('Фамилия: '), year_of_birth=input('Год Рождения: '),
    city=input('Город проживания: '),email=input('email: '),phone=input('phone: '),)


"""
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента 
и возвращает сумму наибольших двух аргументов.
"""
def my_func(a, b, c):
    x = [a, b, c]
    x.remove(min(a, b, c))
    return sum(x)
 
     
 
my_func(7,88, 101)
  

"""
4. Программа принимает действительное положительное число x и целое отрицательное число y. 
Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
 При решении задания нужно обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. 
Первый — возведение в степень с помощью оператора **. 
Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
"""
def my_func(x, y):
    return (x ** y)

print(my_func(float(input('Введите основание: ')), int(input('ВВедите степень: '))))

########################################################################

def my_func(x, y):
    bedingung = 1
    result = 1 / x
    while bedingung < abs(y):
        result = result * (1 / x)
        bedingung += 1
    return result

print(my_func(float(input('Введите основание: ')), int(input('ВВедите степень: '))))





"""
5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. 
При нажатии Enter должна выводиться сумма чисел. 
Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. 
Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. 
Если специальный символ введён после нескольких чисел,
 то вначале нужно добавить сумму этих чисел к полученной ранее сумме
 и после этого завершить программу.
"""
def calc_sum(*nums):
    sum = 0
    symbol = False
    for num in nums:
        try:
            if num:
                sum += float(num)
        except ValueError:
            symbol = True
    return sum, symbol

general_sum = 0

while True:
    numbers_string = input('Введите числа через пробел: ').split(' ')
    sum, stop_symbol = calc_sum(*numbers_string)
    general_sum += sum
    print(f'сумма {general_sum}')

    if stop_symbol:
        break


"""
6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв
 и возвращающую их же, но с прописной первой буквой. 
 Например, print(int_func(‘text’)) -> Text.
"""
def int_func(text):
        return text.title()
print(int_func(input('ВВедите текст через пробел:')))

"""
7. Продолжить работу над заданием. 
В программу должна попадать строка из слов, разделённых пробелом.
 Каждое слово состоит из латинских букв в нижнем регистре.
 Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. 
 Используйте написанную ранее функцию int_func().
"""
 

